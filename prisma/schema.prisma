generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  contact       String?
  isPremium     Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // ðŸ‘‡ NEW RELATION FIELDS (fix for your error)
  scenarios  Scenario[]
  benchmarks Benchmark[]
  waterfalls Waterfall[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Scenario {
  id           String @id @default(cuid())
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  exitMultiple Float
  winners      Int
  neutrals     Int
  writeOffs    Int
  tvpi         Float
  irr          Float
}

model Benchmark {
  id              String @id @default(cuid())
  userId          String
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  metric          String
  fundPerformance Float
  peerMedian      Float
  topQuartile     Float
}

model Waterfall {
  id             String @id @default(cuid())
  userId         String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  year           Int
  lpDistribution Float
  gpDistribution Float
  lpCumulative   Float
  gpCumulative   Float
}
